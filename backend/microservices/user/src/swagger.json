{
  "openapi": "3.0.0",
  "info": {
    "title": "User API",
    "version": "1.0.0",
    "description": "A simple Express User API"
  },
  "paths": {
    "/api/users/login": {
      "get": {
        "summary": "Login a user",
        "tags": ["Users"],
        "parameters": [
          {
            "in": "query",
            "name": "email",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The email of the user"
          },
          {
            "in": "query",
            "name": "password",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The password of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "User logged in successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "An error occurred while logging in the user"
          }
        }
      }
    },
    "/api/users/register": {
      "post": {
        "summary": "Register a new user",
        "tags": ["Users"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The user was successfully registered",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "500": {
            "description": "An error occurred while registering the user"
          }
        }
      }
    },
    "/api/users/{id}": {
      "put": {
        "summary": "Update the user by the id",
        "tags": ["Users"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The user id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The user was updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "The user was not found"
          }
        }
      }
    },
    "/api/users/password/{id}": {
      "put": {
        "summary": "Update the user by the id",
        "tags": ["Users"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The user id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The user was updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "The user was not found"
          }
        }
      }
    },
    "/api/users/address/{user_id}": {
      "get": {
        "summary": "Get address by user id",
        "tags": ["Address"],
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The user id"
          }
        ],
        "responses": {
          "200": {
            "description": "The address of the user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Address"
                }
              }
            }
          },
          "404": {
            "description": "Address not found"
          },
          "500": {
            "description": "An error occurred while retrieving the address"
          }
        }
      },
      "delete": {
        "summary": "Delete an address by user id",
        "tags": ["Address"],
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "The user id"
          }
        ],
        "responses": {
          "200": {
            "description": "Address deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Address"
                }
              }
            }
          },
          "404": {
            "description": "Address not found"
          },
          "500": {
            "description": "An error occurred while deleting the address"
          }
        }
      }
    },
    "/api/users/address": {
      "post": {
        "summary": "Add an address",
        "tags": ["Address"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Address"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Address added successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Address"
                }
              }
            }
          },
          "500": {
            "description": "An error occurred while adding the address"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "User": {
        "type": "object",
        "required": ["name", "email", "password"],
        "properties": {
          "id": {
            "type": "integer",
            "description": "The auto-generated id of the user"
          },
          "name": {
            "type": "string",
            "description": "The name of the user"
          },
          "email": {
            "type": "string",
            "description": "The email of the user"
          },
          "password": {
            "type": "string",
            "description": "The hashed password of the user"
          }
        },
        "example": {
          "id": 1,
          "name": "John Doe",
          "email": "john.doe@example.com",
          "password": "Qwerty123"
        }
      },
      "Address": {
        "type": "object",
        "required": ["user_id", "address", "city", "state", "pincode", "contactno"],
        "properties": {
          "user_id": {
            "type": "integer",
            "description": "The ID of the user"
          },
          "address": {
            "type": "string",
            "description": "The address of the user"
          },
          "city": {
            "type": "string",
            "description": "The city of the user"
          },
          "state": {
            "type": "string",
            "description": "The state of the user"
          },
          "pincode": {
            "type": "string",
            "description": "The pincode of the user"
          },
          "contactno": {
            "type": "string",
            "description": "The contact number of the user"
          }
        },
        "example": {
          "user_id": "d5fE_asz",
          "address": "123 Main St",
          "city": "Anytown",
          "state": "Anystate",
          "pincode": "123456",
          "contactno": "123-456-7890"
        }
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ]
}